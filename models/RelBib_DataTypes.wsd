@startuml RelBib_DataTypes
/'
Diagram:        RelBib_Series
DateCreate:     30/08/2018
Description:    These bibliographic models are developed to consolidate and standardize the data models used for bibliographic and citation purposes.
                These models are meant to be fully compatible with ISO 690 and ISO TC 46â€™s (and SC 4, SC 9) work on bibliography.
                They are used extensively in the following projects as containers for bibliographic data management and for managing document metadata:

                - ISO Standards
                - CSD Standards
                - Chinese Standards (GB and family)
                - ISO bibliography gem

                Below are the UML diagrams.
                The document models are expressed as UML and as RelaxNG Compact (RNC) grammars; see discussion under Grammars. This repository contains the RNC grammars for the base BibliographicItem model, Citation model and the Contributor model.
                The document models are currently used by IsoDoc-based authoring tools for standards, which convert Asciidoctor source to XML representations of the document models, and validate the XML generated against the RNC schemas:

                - https://github.com/metanorma/metanorma-iso
                - https://github.com/metanorma/metanorma-csd
                - https://github.com/metanorma/metanorma-gb
                - And so on

                They are also used by tools that render those XML representations of the document models, into HTML and Microsoft Word:

                - https://github.com/metanorma/isodoc
                - https://github.com/metanorma/metanorma-csd (inheriting from isodoc)
                - https://github.com/metanorma/metanorma-gb (inheriting from isodoc)
                - And so on

History of changes:
'/

'******* CONFIGURATION ************************************************
!include style.uml.inc


'******* CLASS DEFINITION *********************************************

together {

    class Uri <<dataType>> {
    }

    class Iso8601DataTime <<dataType>> {

    }

    class Iso8601Date <<dataType>> {

    }

    class Iso639Code <<dataType>> {

    }

    class Iso15924Code <<dataType>> {

    }

    class Iso4217Code <<dataType>> {
    }

    class String <<primitiveType>> {

    }

}

together {

    class DateTime{
        +text:String[0..1]
        +content: Iso8601DateTime[0..1]
    }

    class TypedUri{
        +type: String[0..1]
        +content: Uri
    }


}

class LocalizedString{
    +language: Iso639Code[0..*]
    +script: Iso15924Code[0..*]
    +content: String
    +variant: LocalizedString[0..*]
}


class FormattedString{
    +type: StringFormat
}

enum StringFormat <<enumeration>>{
    text/plain
    text/html
    application/docbook+xml
    application/tei+xml
    text/x-asciidoc
    text/markdown
    application/x-isodoc+xml
}

'******* NOTES ********************************************************
note left of StringFormat: The corresponding MIME\ntypes, defaults to "text/plain"\n(docbook / asciidoc / isdoc\nare not registered types yet)
note left of LocalizedString: type is either a single variant,\nor multiple variants wrapped in "variant" tag

'******* CLASS RELATIONS **********************************************
Uri -[hidden]- Iso8601DataTime
Iso8601DataTime -[hidden]- Iso8601Date
Iso8601Date -[hidden]- Iso639Code
Iso639Code -[hidden]- Iso15924Code
Iso15924Code -[hidden]- String

LocalizedString <|-- FormattedString
FormattedString <|-- StringFormat
Uri <-- TypedUri

@enduml
